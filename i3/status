#!/usr/bin/env python3

import datetime
from pathlib import Path
import argparse
import os
import subprocess
import re

import i3ipc



parser = argparse.ArgumentParser()
parser.add_argument('--toggle', action='store_true')
args = parser.parse_args()
i3_hide_time_fn = Path('/tmp/i3_hide_time')


i3 = i3ipc.Connection()
num_scratchpad = len(i3.get_tree().scratchpad().leaves())
if num_scratchpad > 0:
    print('📝', num_scratchpad, end=' | ')


# Run a command and get its output
result = subprocess.run("xrandr --verbose", shell=True, capture_output=True, text=True)
# Match "Brightness: [float]"
brightness = re.search(r"Brightness: ([0-9]\.[0-9]+)", result.stdout)
if brightness:
    print("🔆", brightness.group(1), end=' | ')
else:
    print("🔆 N/A", end=' | ')


battery = open('/sys/class/power_supply/BAT0/capacity').read().strip()
status = open('/sys/class/power_supply/BAT0/status').read().strip()
if int(battery) < 20 and status == 'Discharging':
    print('🪫', end='')
    # if second is modulo 60, then notify
    if datetime.datetime.now().second % 60 == 0:
        os.system(
            'notify-send -u critical "Battery low" "Battery is at {}%"'
            .format(battery)
        )
elif status == 'Charging':
    print('🔌', end=' ')
else:
    print('🔋', end=' ')
print(battery, end='% | ')


if args.toggle:
    if i3_hide_time_fn.exists():
        i3_hide_time_fn.unlink()
    else:
        i3_hide_time_fn.touch()
else:
    # By default, print only date
    show_time = True
    if i3_hide_time_fn.exists():
        show_time = False

    if show_time:
        str_fr_time = '%F %R'
    else:
        str_fr_time = '%F'
    end = ' | '

    print(datetime.datetime.now().strftime(str_fr_time), end=end)


result = subprocess.run("ip -4 addr show wlan0", shell=True, capture_output=True, text=True)
# find inet [ip]/[mask] pattern
ip = re.search(r"inet ([0-9]+\.[0-9]+\.[0-9]+)(\.[0-9]+/[0-9]+)", result.stdout)
if ip:
    print('📡', ip.group(2), end=' | ', sep='..')
else:
    print('📡 N/A', end=' | ')
