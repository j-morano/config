#!/usr/bin/env python3

import datetime
from pathlib import Path
import argparse
import os

import i3ipc



battery = open('/sys/class/power_supply/BAT0/capacity').read().strip()
status = open('/sys/class/power_supply/BAT0/status').read().strip()
print('Battery:', battery, end='%')
if int(battery) < 20 and status == 'Discharging':
    print('ðŸª«', end='| ')
    # if second is modulo 60, then notify
    if datetime.datetime.now().second % 60 == 0:
        os.system(
            'notify-send -u critical "Battery low" "Battery is at {}%"'
            .format(battery)
        )
elif status == 'Charging':
    print('ðŸ”Œ', end='| ')
else:
    print('ðŸ”‹', end='| ')

parser = argparse.ArgumentParser()
parser.add_argument('--toggle', action='store_true')
args = parser.parse_args()

i3_hide_time_fn = Path('/tmp/i3_hide_time')

if args.toggle:
    if i3_hide_time_fn.exists():
        i3_hide_time_fn.unlink()
    else:
        i3_hide_time_fn.touch()
else:
    i3 = i3ipc.Connection()
    num_scratchpad = len(i3.get_tree().scratchpad().leaves())

    # By default, print only date
    show_time = True
    if i3_hide_time_fn.exists():
        show_time = False

    if show_time:
        str_fr_time = '%F %R'
    else:
        str_fr_time = '%F'
    end = ' | '
    if num_scratchpad > 0:
        print('Scratchpad:', num_scratchpad, end='')

    print(' |', datetime.datetime.now().strftime(str_fr_time), end=end)
